import numpy as np
import os
from glob import glob
from PIL import Image
from matplotlib import pyplot as plt
from pathlib import Path

from keras.preprocessing.image import img_to_array, ImageDataGenerator

import argparse

def parse_args():
  """ Parse command line arguments.
  """
  parser = argparse.ArgumentParser(description="Data Augmentation")
  parser.add_argument(
      "--clean", help="Delete all images generated by the data augmentor",
      action = 'store_true',
      default = False
  )
  return parser.parse_args()

def clean(path_tubes):
  print('Cleaning...')

  for im_path in list(Path(".").rglob("*.jpg")):
    im_name = str(im_path)
    if 'augg_' in im_name:
      os.remove(im_name)
    


def transform_image(img, tube_path):
  datagen = ImageDataGenerator( 
        rotation_range = 40, 
        shear_range = 0.2, 
        zoom_range = 0.2, 
        horizontal_flip = True, 
        brightness_range = (0.5, 1.5))

  # Set number of transforms per image
  img_aug_limit = 6

  im = img_to_array(img)
  im = im.reshape((1, ) + im.shape)

  i = 0
  for batch in datagen.flow(im, batch_size = 1, save_to_dir = tube_path, save_prefix = 'augg_', save_format = 'jpg'):
    i += 1
    if i > img_aug_limit:
      break

def augment_class(class_path):
  print(f"Augmenting: {class_path}")

  for tube_path in glob(class_path + '*/'):
    for im_path in glob(tube_path + '*.jpg'):
      img = np.asarray(Image.open(im_path))
      transform_image(img, tube_path)
      

def main(path_tubes):
  # Determine average tubes per class
  tube_counts = []
  for action_class in glob(path_tubes + '*/'):
    tube_counts.append(sum([len(files) for r, d, files in os.walk(action_class)]))

  avg_tube_size = np.mean(tube_counts).astype(int)
  print(f"Discovered images: {np.sum(tube_counts)}")
  print(f"Average tube size: {avg_tube_size}")

  # Augment classes with less than average
  for action_class in glob(path_tubes + '*/'):
    cnt = sum([len(files) for r, d, files in os.walk(action_class)])
    if(cnt < avg_tube_size or os.path.basename(os.path.normpath(action_class)) == 'Unknown'):
      augment_class(action_class)


if __name__ == '__main__':
    # Parse user provided arguments
    args = parse_args()
    # Path to action tubes
    path_tubes = './action-tubes/completed/'
    
    if args.clean:
      clean(path_tubes)
    else:
      main(path_tubes)
